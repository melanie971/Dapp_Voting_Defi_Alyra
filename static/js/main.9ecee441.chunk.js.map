{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","WorkflowStatus","RegisteringVoters","ProposalsRegistrationStarted","ProposalsRegistrationEnded","VotingSessionStarted","VotingSessionEnded","VotesTallied","Status_Sol2Web","Sol_Status","App","state","accounts","contract","whitelist","myproposal","proposals","winningProposalDescription","IsOwner","Status","DisplayConfetti","initState","componentDidMount","eth","getAccounts","setState","net","getId","networkId","deployedNetwork","Voting","networks","instance","Contract","abi","address","events","VoterRegistrered","on","event","doWhenEvent","error","ProposalRegistred","Voted","getWinningProposalDescription","WorkflowStatusChange","methods","owner","call","owner_address","runInit","alert","currentWorkflowStatus","currentStatus","getAddresses","getProposals","returnValues","LookAtTheWinningProposal","value","addVoterToList","send","from","btn_startRegisteringProposals","startRegisteringProposal","btn_EndRegisteringProposals","endOfRegisteringProposal","btn_StartVotingSession","startVote","btn_EndVotingSession","endVote","btn_CountingVotes","TheWinnerIs","votesTallied","btn_addingProposal","addProposal","btn_voting","proposal_id","DoingTheVote","show","this","className","style","display","justifyContent","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","map","border","Form","Group","controlId","Control","type","id","ref","input","Button","onClick","account","onChange","e","target","item","index","key","description","size","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ecee441.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Voting from \"./contracts/Voting.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport Confetti from 'react-confetti';\r\nimport \"./App.css\";\r\n\r\nconst WorkflowStatus={ //Etat d'avancement du vote\r\n  RegisteringVoters : \"RegisteringVoters\",\r\n  ProposalsRegistrationStarted: \"ProposalsRegistrationStarted\",\r\n  ProposalsRegistrationEnded: \"ProposalsRegistrationEnded\",\r\n  VotingSessionStarted: \"VotingSessionStarted\",\r\n  VotingSessionEnded: \"VotingSessionEnded\",\r\n  VotesTallied: \"VotesTallied\"\r\n};\r\n\r\nfunction Status_Sol2Web(Sol_Status){\r\n  switch (Sol_Status){\r\n    case \"0\":\r\n      return WorkflowStatus.RegisteringVoters;\r\n      break;\r\n    case \"1\": \r\n      return WorkflowStatus.ProposalsRegistrationStarted;\r\n      break;\r\n    case \"2\": \r\n      return WorkflowStatus.ProposalsRegistrationEnded;\r\n      break;\r\n    case \"3\": \r\n      return WorkflowStatus.VotingSessionStarted;\r\n      break;\r\n    case \"4\": \r\n      return WorkflowStatus.VotingSessionEnded;\r\n      break;\r\n    case \"5\": \r\n      return WorkflowStatus.VotesTallied;\r\n      break;\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  state = { web3: null,\r\n            accounts: null, \r\n            contract: null, \r\n            whitelist: null, \r\n            myproposal: null, \r\n            proposals: null, \r\n            winningProposalDescription: null,\r\n            IsOwner:false,\r\n            Status: WorkflowStatus.RegisteringVoters,\r\n            DisplayConfetti: false\r\n          };\r\n\r\n  initState = async () =>{\r\n        return { web3: null,\r\n          accounts: null, \r\n          contract: null, \r\n          whitelist: null, \r\n          myproposal: null, \r\n          proposals: null, \r\n          winningProposalDescription: null,\r\n          IsOwner:false,\r\n          Status: WorkflowStatus.RegisteringVoters,\r\n          DisplayConfetti: false\r\n              };\r\n  }\r\n\r\n    componentDidMount = async () => {\r\n    try {\r\n      // Récupérer le provider web3\r\n      const web3 = await getWeb3();\r\n      // Utiliser web3 pour récupérer les comptes de l’utilisateur (MetaMask dans notre cas) \r\n      const accounts = await web3.eth.getAccounts();\r\n      this.setState({ 'account': accounts[0] });//ajout\r\n      console.log(accounts);\r\n    \r\n      // Récupérer l’instance du smart contract avec web3 et les informations du déploiement du fichier\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = Voting.networks[networkId];\r\n      const instance = new web3.eth.Contract(Voting.abi,deployedNetwork && deployedNetwork.address);\r\n      \r\n      \r\n      //Query and Monitor Ethereum Contract Events with Web3\r\n      instance.events.VoterRegistrered().on('data', (event) => this.doWhenEvent(event)).on('error', console.error);\r\n      instance.events.ProposalsRegistrationStarted().on('data', (event) => this.doWhenEvent(event)).on('error', console.error);\r\n      instance.events.ProposalsRegistrationEnded().on('data', (event) => this.doWhenEvent(event)).on('error', console.error);\r\n      instance.events.ProposalRegistred().on('data', (event) => this.doWhenEvent(event)).on('error', console.error);\r\n      instance.events.VotingSessionStarted().on('data', (event) => this.doWhenEvent(event)).on('error', console.error);\r\n      instance.events.VotingSessionEnded().on('data', (event) => this.doWhenEvent(event)).on('error', console.error);\r\n      instance.events.Voted().on('data', (event) => this.doWhenEvent(event)).on('error', console.error);\r\n      instance.events.VotesTallied().on('data', (event) => this.getWinningProposalDescription(event)).on('error', console.error);\r\n      instance.events.WorkflowStatusChange().on('data', (event) => this.doWhenEvent(event)).on('error', console.error);\r\n      \r\n      //Owner of contract\r\n      const owner_address = await instance.methods.owner().call();\r\n      console.log(\"owner: \",owner_address);\r\n      \r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3, accounts, contract: instance, IsOwner:(owner_address == accounts[0]) }, this.runInit);//\r\n      \r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Non-Ethereum browser detected. Can you please try to install MetaMask before starting.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  //Fonction pour mettre à jour les variables\r\n  runInit = async() => {\r\n    const { accounts, contract } = this.state;\r\n    \r\n    let currentStatus = await contract.methods.currentWorkflowStatus().call(); //List of currentWorkflowStatus\r\n    let Status = Status_Sol2Web(currentStatus);\r\n\r\n    let whitelist = await contract.methods.getAddresses().call(); // récupérer la liste des comptes autorisés\r\n    let proposals = await contract.methods.getProposals().call(); //recupérer les propositions\r\n    //let winningProposalDescription = '' ;\r\n    //const admin = await contract.methods.owner().call();\r\n    \r\n    //Updating states\r\n    this.setState({ whitelist: whitelist, proposals: proposals, Status: Status}); // Updating the states\r\n    \r\n    console.log(\"Current status=\",Status,\", whitelist=\",whitelist, \"List of prosals:\", proposals);\r\n        \r\n  }; \r\n\r\n  /*Gestion des événements reçus du smart contract*/\r\n  doWhenEvent = async (event) => {\r\n    console.log(event.event);\r\n    console.log(event.returnValues);\r\n    await this.runInit();\r\n  }  \r\n\r\n  getWinningProposalDescription = async() => {\r\n    const { accounts, contract } = this.state;\r\n    const winningProposalDescription = await contract.methods.LookAtTheWinningProposal().call();\r\n    this.setState({ winningProposalDescription: winningProposalDescription, DisplayConfetti:true});\r\n    console.log(winningProposalDescription);\r\n  }\r\n\r\n  // Fonctions de l'administrateur\r\n  // fonction pour permettre ajout d'une adresse à la liste des comptes\r\n  whitelist = async() => {\r\n    const { accounts, contract } = this.state;\r\n    const address = this.address.value;\r\n    // Interaction avec le smart contract pour ajouter un compte \r\n    await contract.methods.addVoterToList(address).send({from: accounts[0]});\r\n    // Récupérer la liste des comptes autorisés\r\n    this.runInit();\r\n  }\r\n \r\n  //fonction pour commencer le processus d'enregistrement des propositions\r\n  btn_startRegisteringProposals = async() => {\r\n    const { accounts, contract } = this.state;\r\n    await contract.methods.startRegisteringProposal().send({from: accounts[0]});\r\n   \r\n  }\r\n    \r\n  //fonction pour cloturer le processus d'enregistrement des propositions\r\n  btn_EndRegisteringProposals = async() => {\r\n    const { accounts, contract } = this.state;\r\n    await contract.methods.endOfRegisteringProposal().send({from: accounts[0]});\r\n   \r\n  }\r\n\r\n  //fonction pour commencer la session de vote\r\n  btn_StartVotingSession = async() => {\r\n    const { accounts, contract } = this.state;\r\n    await contract.methods.startVote().send({from: accounts[0]});\r\n  }\r\n\r\n  //fonction pour mettre fin à la session de vote\r\n  btn_EndVotingSession = async() => {\r\n    const { accounts, contract } = this.state;\r\n    await contract.methods.endVote().send({from: accounts[0]});\r\n  }\r\n\r\n  //fonction pour faire le compte des votes\r\n  btn_CountingVotes = async() => {\r\n    const { accounts, contract } = this.state;\r\n    await contract.methods.TheWinnerIs().send({from: accounts[0]});\r\n    await contract.methods.votesTallied().send({from: accounts[0]}); \r\n  }\r\n\r\n  //   //Fonction pour tout cloturer \r\n  // btn_votetallied = async() => {\r\n  //   const { accounts, contract } = this.state;\r\n  //   await contract.methods.votesTallied().send({from: accounts[0]}); \r\n  // }\r\n\r\n  \r\n  // Fonctions pour les votants\r\n  //fonction pour permettre ajout d'une proposition\r\n  btn_addingProposal= async() => {\r\n    const {accounts, contract } = this.state;\r\n    await contract.methods.addProposal(this.state.myproposal).send({from: accounts[0]});\r\n    this.runInit();\r\n    \r\n  }\r\n\r\n  //fonction pour voter\r\n  btn_voting = async() => {\r\n    const {accounts, contract } = this.state;\r\n    let proposal_id = this.proposal_id.value;\r\n    await contract.methods.DoingTheVote(proposal_id -1 ).send({from: accounts[0]});\r\n    this.runInit();\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n        \r\n    if (!this.state.web3) { return <div>Loading Web3, accounts, and contract...</div>;}\r\n\r\n    var show;\r\n    console.log(\"State=\", this.state);\r\n    switch (this.state.Status){\r\n      case WorkflowStatus.RegisteringVoters:\r\n        show = (\r\n         <div className=\"App\">\r\n           <div>\r\n               <h2 className=\"text-center\">Voting Dapp - Registering Voters </h2>\r\n               <hr></hr>\r\n               <br></br>\r\n           </div>\r\n           \r\n           <div style={{display: 'flex', justifyContent: 'center'}}>\r\n             <Card style={{ width: '50rem' }}>\r\n               <Card.Header><strong> Authorized voters </strong></Card.Header>\r\n               <Card.Body>\r\n                 <ListGroup variant=\"flush\">\r\n                   <ListGroup.Item>\r\n                     <Table striped bordered hover>\r\n                       <thead>\r\n                         <tr>\r\n                           <th>List of registrered addresses</th>\r\n                         </tr>\r\n                       </thead>\r\n                       <tbody>\r\n                         {this.state.whitelist !== null && \r\n                           this.state.whitelist.map((a) => <tr><td>{a}</td></tr>)\r\n                         }\r\n                       </tbody>\r\n                     </Table>\r\n                   </ListGroup.Item>\r\n                 </ListGroup>\r\n               </Card.Body>\r\n             </Card>\r\n           </div>\r\n           <br></br>\r\n          \r\n           { \r\n             this.state.IsOwner && //Only owner can registerer voter\r\n            <div>\r\n             <div style={{display: 'flex', justifyContent: 'center'}}>\r\n              <Card border=\"danger\" style={{ width: '50rem' }}>\r\n                <Card.Header><strong> Register a new account </strong></Card.Header>\r\n                <Card.Body>\r\n                  <Form.Group controlId=\"formAddress\">\r\n                    <Form.Control type=\"text\" id=\"address\" ref={(input) => { this.address = input }}/>\r\n                  </Form.Group>\r\n                  <Button onClick={ this.whitelist } variant=\"danger\"> Register </Button>  <br/>\r\n                  <br></br>\r\n                  <Button onClick={ this.btn_startRegisteringProposals } variant=\"dark\" className=\"px-3\"> End Registering Voters and Start Registering Proposal </Button>\r\n                                      \r\n                </Card.Body>\r\n              </Card>\r\n              </div>\r\n              </div> \r\n           }\r\n           <br></br>\r\n \r\n             <div> Current connected account: {this.state.account}</div>\r\n           </div>\r\n         \r\n       );\r\n           break;\r\n\r\n      //Second Step: Registering Proposals\r\n      case WorkflowStatus.ProposalsRegistrationStarted:\r\n        show = (\r\n          <div className=\"App\">\r\n          <div>\r\n              <h2 className=\"text-center\">Voting Dapp - Registering Proposals </h2>\r\n              <hr></hr>\r\n              <br></br>\r\n          </div>\r\n  \r\n          { \r\n            this.state.IsOwner && //Only owner can end Proposal registration and start votting session\r\n            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n            <Card border=\"danger\" style={{ width: '50rem' }}>\r\n              <Card.Header><strong> Proposals registration process </strong></Card.Header>\r\n              <Card.Body>\r\n                \r\n                <Button onClick={ this.btn_EndRegisteringProposals } variant=\"danger\" > Close it</Button> <br/>\r\n                \r\n                </Card.Body>\r\n                </Card>\r\n            </div> \r\n          }\r\n\r\n          { \r\n            !this.state.IsOwner &&\r\n          <div style={{display: 'flex', justifyContent: 'center'}}>\r\n          <Card border=\"warning\" style={{ width: '50rem' }}>\r\n            <Card.Header><strong> Register a proposal </strong></Card.Header>\r\n            <Card.Body>\r\n            <Form.Control type=\"text\" value={this.state.myproposal} onChange={e => this.setState({myproposal: e.target.value})}/>\r\n              <br/>\r\n              <Button onClick={ this.btn_addingProposal } variant=\"danger\" > Send my proposal'description </Button>\r\n              <br/>\r\n              <br/>\r\n            </Card.Body>\r\n          </Card>\r\n          </div>\r\n          }\r\n  \r\n          <div style={{display: 'flex', justifyContent: 'center'}}>\r\n          <Card style={{ width: '50rem' }}>\r\n            <Card.Header><strong> List of Proposals </strong></Card.Header>\r\n            <Card.Body>\r\n              <ListGroup variant=\"flush\">\r\n                <ListGroup.Item>\r\n                  <Table striped bordered hover>\r\n                    <tbody>\r\n                    <ol>\r\n                    {this.state.proposals !== null && \r\n                      this.state.proposals.map((item, index) => (\r\n                        <li key={index}>{item.description}</li>\r\n                      ))\r\n                    }\r\n                    </ol>\r\n                    </tbody>\r\n                  </Table>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n\r\n        \r\n        <div> Current connected account: {this.state.account}</div>\r\n      </div>\r\n\r\n       );\r\n           break;\r\n\r\n      //Third step: Starting Voting Session\r\n      case WorkflowStatus.ProposalsRegistrationEnded:\r\n        show = (\r\n          <div className=\"App\">\r\n          <div>\r\n              <h2 className=\"text-center\">Voting Dapp- Voting Session </h2>\r\n              <hr></hr>\r\n              <br></br>\r\n          </div>\r\n    \r\n          { \r\n            this.state.IsOwner && //Only Owner can end the Voting session and do the counting\r\n          \r\n            \r\n          <div style={{display: 'flex', justifyContent: 'center'}}>\r\n          <Card border=\"danger\" style={{ width: '50rem' }}>\r\n            <Card.Header><strong> Voting Session </strong></Card.Header>\r\n            <Card.Body>\r\n              <Button onClick={ this.btn_StartVotingSession } variant=\"danger\" > Start Voting Session </Button>           \r\n            </Card.Body>\r\n          </Card>\r\n          </div>\r\n          }\r\n\r\n          { \r\n            !this.state.IsOwner && //Only Owner can end the Voting session and do the counting\r\n          \r\n            \r\n          <div style={{display: 'flex', justifyContent: 'center'}}>\r\n          <Card border=\"success\" style={{ width: '50rem' }}>\r\n            <Card.Header><strong> Voting Session </strong></Card.Header>\r\n            <Card.Body>\r\n              Voting session is not open yet - come back later         \r\n            </Card.Body>\r\n          </Card>\r\n          </div>\r\n          }\r\n\r\n                 \r\n        <div> Current connected account: {this.state.account}</div>\r\n      </div>\r\n\r\n       );\r\n           break;\r\n\r\n      //Fourth step: Voting Session Started\r\n      case WorkflowStatus.VotingSessionStarted:\r\n        show = (\r\n          <div className=\"App\">\r\n          <div>\r\n              <h2 className=\"text-center\">Voting Dapp - Voting Session </h2>\r\n              <hr></hr>\r\n              <br></br>\r\n          </div>\r\n    \r\n          { \r\n            this.state.IsOwner && //Only Owner can end the Voting session and do the counting\r\n          \r\n            \r\n          <div style={{display: 'flex', justifyContent: 'center'}}>\r\n          <Card className=\"mb-2\" border=\"danger\" style={{ width: '50rem' }}>\r\n            <Card.Header><strong> Voting Session </strong></Card.Header>\r\n            <Card.Body>\r\n                  \r\n              <Button onClick={ this.btn_EndVotingSession } variant=\"danger\" > End Voting Session </Button>\r\n                            \r\n            </Card.Body>\r\n          </Card>\r\n          </div>\r\n          }\r\n\r\n          <div style={{display: 'flex', justifyContent: 'center'}}>\r\n          <Card style={{ width: '50rem' }}>\r\n            <Card.Header><strong> List of Proposals </strong></Card.Header>\r\n            <Card.Body>\r\n              <ListGroup variant=\"flush\">\r\n                <ListGroup.Item>\r\n                  <Table striped bordered hover>\r\n                    <tbody>\r\n                    <ol>\r\n                    {this.state.proposals !== null && \r\n                      this.state.proposals.map((item, index) => (\r\n                        <li key={index}>{item.description}</li>\r\n                      ))\r\n                    }\r\n                    </ol>\r\n                    </tbody>\r\n                  </Table>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n        { !this.state.IsOwner && \r\n          <div style={{display: 'flex', justifyContent: 'center'}}>\r\n          <Card className=\"mb-2\" border=\"danger\" style={{ width: '50rem' }}>\r\n            <Card.Header><strong> Enter # of the proposal you are voting for </strong></Card.Header>\r\n            <Card.Body>\r\n            <Form.Group controlId=\"formProposal\">\r\n            <Form.Control type=\"number\" id=\"proposal_id\" ref={(input) => { this.proposal_id = input }} size=\"sm\"/>\r\n            <br></br>\r\n            <Button onClick={ this.btn_voting } variant=\"danger\" > Submit my vote </Button>\r\n          </Form.Group>\r\n            </Card.Body>\r\n          </Card>\r\n          </div>\r\n        }\r\n        \r\n        <div> Current connected account: {this.state.account}</div>\r\n      </div>\r\n\r\n       );\r\n\r\n           break;\r\n\r\n    //Sixth step: Ending Voting Session\r\n    case WorkflowStatus.VotingSessionEnded:\r\n      show = (\r\n        <div className=\"App\">\r\n        <div>\r\n            <h2 className=\"text-center\">Voting Dapp - Ending the voting session </h2>\r\n            <hr></hr>\r\n            <br></br>\r\n        </div>\r\n  \r\n        { \r\n          this.state.IsOwner && //Only Owner can end the Voting session and do the counting\r\n        \r\n          \r\n        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n        <Card style={{ width: '50rem' }}>\r\n          <Card.Header><strong> </strong></Card.Header>\r\n          <Card.Body>\r\n                \r\n            <Button onClick={ this.btn_CountingVotes } variant=\"danger\" > Count votes and end process </Button>\r\n            \r\n            \r\n          </Card.Body>\r\n        </Card>\r\n        </div>\r\n        }\r\n\r\n      <div> Current connected account: {this.state.account}</div>\r\n    </div>\r\n\r\n     );\r\n     \r\n     break;\r\n\r\n  //Seventh step: VotesTallied - > Showing Winning Proposal\r\n  case WorkflowStatus.VotesTallied:\r\n    show = (\r\n      <div className=\"App\">\r\n      <div>\r\n          <h2 className=\"text-center\">Voting Dapp - THE END  </h2>\r\n          <hr></hr>\r\n          <br></br>\r\n      </div>\r\n\r\n      { this.state.DisplayConfetti &&\r\n            <Confetti/>\r\n      }\r\n\r\n    \r\n      <div style={{display: 'flex', justifyContent: 'center'}}>\r\n      <Card style={{ width: '50rem' }}>\r\n        <Card.Header><strong> The wining proposal is :</strong></Card.Header>\r\n        <Card.Body>\r\n            {this.state.winningProposalDescription}\r\n            <br></br>\r\n            <br></br>\r\n            <Button onClick={ this.getWinningProposalDescription } variant=\"primary\" > Show winning proposal </Button>\r\n        </Card.Body>\r\n        </Card>\r\n      </div>\r\n      \r\n\r\n      \r\n\r\n      <br></br>\r\n      <div> Current connected account: {this.state.account}</div>\r\n    </div>\r\n\r\n    );\r\n  \r\n  break;\r\n\r\n\r\n     } \r\n     \r\n     return (show);\r\n\r\n    }\r\n  }\r\n  \r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}